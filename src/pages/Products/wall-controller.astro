---
import Layout from '../../layouts/Layout.astro';

const highlights = [
  {
    id: "01",
    title: "Excellent splicing performance",
    content: "High-performance video wall controller offering seamless splicing and superior image quality across multiple displays.",
    image: "https://images.unsplash.com/photo-1542751371-adc38448a05e?w=800&auto=format&fit=crop"
  },
  {
    id: "02",
    title: "Flexible roaming experience",
    content: "Dynamic window management allowing content to be freely moved and positioned across the entire video wall.",
    image: "https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?w=800&auto=format&fit=crop"
  },
  {
    id: "03",
    title: "Open windows freely",
    content: "Intuitive multi-window support enabling simultaneous display of various content sources.",
    image: "https://images.unsplash.com/photo-1542751371-adc38448a05e?w=800&auto=format&fit=crop"
  },
  {
    id: "04",
    title: "Picture in picture",
    content: "Advanced PiP functionality allowing overlay of multiple video sources with customizable positioning and sizing.",
    image: "https://images.unsplash.com/photo-1542751371-adc38448a05e?w=800&auto=format&fit=crop",
    subtitle: "Roaming: the window can be dragged to anywhere in the screen."
  }
];
---

<Layout title="Wall Controller - Dahua Saudi">
  <div class="bg-white">
    <!-- Header Section -->
    <div class="relative h-[60vh] overflow-hidden">
      <img
        src="https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?q=80&w=2070&auto=format&fit=crop"
        alt="Wall Controller Header"
        class="w-full h-full object-cover"
      />
      <div class="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
        <h1 class="text-5xl font-bold text-white text-center">
          Wall Controller
          <span class="block text-2xl mt-4 font-normal">Professional video wall control solution</span>
        </h1>
      </div>
    </div>

    <!-- Highlights Section -->
    <div class="max-w-7xl mx-auto px-4 py-16">
      <h2 class="text-3xl font-bold text-center mb-16">
        Highlights
        <span class="block w-24 h-1 bg-gradient-to-r from-blue-600 to-blue-800 mx-auto mt-4"></span>
      </h2>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-12">
        {highlights.map((item) => (
          <div class="group">
            <div class="bg-white rounded-xl shadow-lg overflow-hidden transition-all duration-300 hover:shadow-2xl">
              <div class="relative h-64 overflow-hidden">
                <img
                  src={item.image}
                  alt={item.title}
                  class="w-full h-full object-cover transform group-hover:scale-110 transition-transform duration-700"
                />
                <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-black/30 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              </div>
              
              <div class="p-8">
                <div class="flex items-center gap-3 mb-4">
                  <span class="text-blue-600 text-lg font-bold">{item.id}</span>
                  <h3 class="text-2xl font-bold text-gray-900">{item.title}</h3>
                </div>
                <p class="text-gray-600 leading-relaxed mb-4">{item.content}</p>
                {item.subtitle && (
                  <p class="text-sm text-blue-600 italic">{item.subtitle}</p>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- Products Section -->
    <div class="max-w-7xl mx-auto px-4 py-16 bg-gray-50">
      <h2 class="text-3xl font-bold text-center mb-16">
        Controller
        <span class="block w-24 h-1 bg-gradient-to-r from-blue-600 to-blue-800 mx-auto mt-4"></span>
      </h2>

      <!-- Product Filters -->
      <div class="flex justify-center mb-12">
        <div class="inline-flex rounded-md shadow-sm">
          <button 
            class="px-6 py-2 text-sm font-medium border border-gray-200 rounded-l-lg transition-colors
            data-[active=true]:bg-blue-600 data-[active=true]:text-white data-[active=true]:border-blue-600
            data-[active=false]:bg-white data-[active=false]:text-gray-600 hover:bg-blue-600 hover:text-white hover:border-blue-600"
            data-filter="all"
            data-active="true"
          >
            ALL
          </button>
          <button 
            class="px-6 py-2 text-sm font-medium border-t border-b border-gray-200 transition-colors
            data-[active=true]:bg-blue-600 data-[active=true]:text-white data-[active=true]:border-blue-600
            data-[active=false]:bg-white data-[active=false]:text-gray-600 hover:bg-blue-600 hover:text-white hover:border-blue-600"
            data-filter="decoder"
            data-active="false"
          >
            Decoder
          </button>
          <button 
            class="px-6 py-2 text-sm font-medium border-t border-b border-gray-200 transition-colors
            data-[active=true]:bg-blue-600 data-[active=true]:text-white data-[active=true]:border-blue-600
            data-[active=false]:bg-white data-[active=false]:text-gray-600 hover:bg-blue-600 hover:text-white hover:border-blue-600"
            data-filter="controller"
            data-active="false"
          >
            Video Wall Controller
          </button>
          <button 
            class="px-6 py-2 text-sm font-medium border border-gray-200 rounded-r-lg transition-colors
            data-[active=true]:bg-blue-600 data-[active=true]:text-white data-[active=true]:border-blue-600
            data-[active=false]:bg-white data-[active=false]:text-gray-600 hover:bg-blue-600 hover:text-white hover:border-blue-600"
            data-filter="keyboard"
            data-active="false"
          >
            Keyboard
          </button>
        </div>
      </div>

      <!-- Product Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {[
          {
            id: 'adu-series',
            name: 'ADU Series',
            description: 'High Definition Video Decoder',
            category: 'decoder',
            image: 'https://images.unsplash.com/photo-1542751371-adc38448a05e?w=800',
            features: ['4K Decoding', 'Multiple Protocols', 'Low Latency']
          },
          {
            id: 'dc-series-1',
            name: 'DC Series',
            description: 'Economic Video Decoder',
            category: 'decoder',
            image: 'https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?w=800',
            features: ['H.265/H.264', 'Multiple Inputs', 'Cost-effective']
          },
          {
            id: 'dc-series-2',
            name: 'DC Series',
            description: 'Economic Video Decoder',
            category: 'decoder',
            image: 'https://images.unsplash.com/photo-1542751371-adc38448a05e?w=800&auto=format&fit=crop',
            features: ['Flexible Display', 'Easy Setup', 'Reliable Performance']
          },
          {
            id: 'kb-1100-e',
            name: 'KB-1100-E',
            description: 'Network Keyboard',
            category: 'keyboard',
            image: 'https://images.unsplash.com/photo-1542751371-adc38448a05e?w=800',
            features: ['USB Interface', 'LCD Display', 'Ergonomic Design']
          },
          {
            id: 'kb-2100',
            name: 'KB-2100',
            description: 'Network Control Keyboard',
            category: 'keyboard',
            image: 'https://images.unsplash.com/photo-1542751371-adc38448a05e?w=800&auto=format&fit=crop',
            features: ['Advanced Control', 'Multiple Protocols', 'Professional Grade']
          }
        ].map(product => (
          <div 
            class="bg-white rounded-xl shadow-lg overflow-hidden transition-all duration-300 hover:-translate-y-1"
            data-category={product.category}
          >
            <div class="relative h-48 overflow-hidden">
              <img 
                src={product.image} 
                alt={product.name}
                class="w-full h-full object-cover transform hover:scale-105 transition-transform duration-500"
              />
              <div class="absolute top-4 right-4">
                <span class="px-3 py-1 bg-blue-600 text-white text-xs rounded-full uppercase">
                  {product.category}
                </span>
              </div>
            </div>

            <div class="p-6">
              <h3 class="text-xl font-bold text-gray-900 mb-2">{product.name}</h3>
              <p class="text-gray-600 mb-4">{product.description}</p>
              
              <div class="flex flex-wrap gap-2 mb-6">
                {product.features.map(feature => (
                  <span class="px-3 py-1 text-xs bg-blue-50 text-blue-600 rounded-full font-medium">
                    {feature}
                  </span>
                ))}
              </div>
              
              <a 
                href={`/products/wall-controller/${product.id}`}
                class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors group"
              >
                Read More
                <svg class="w-4 h-4 ml-2 transform group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </a>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</Layout>

<style>
  .group:hover .group-hover\:scale-110 {
    transform: scale(1.1);
  }

  .group:hover .group-hover\:opacity-100 {
    opacity: 1;
  }
</style>

<script>
  // Optional: Add animation on scroll
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '50px'
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting && entry.target instanceof HTMLElement) {
        entry.target.style.opacity = '1';
        entry.target.style.transform = 'translateY(0)';
      }
    });
  }, observerOptions);

  document.querySelectorAll('.group').forEach(item => {
    if (item instanceof HTMLElement) {
      item.style.opacity = '0';
      item.style.transform = 'translateY(20px)';
      observer.observe(item);
    }
  });

  // Product filtering
  const filterButtons = document.querySelectorAll('[data-filter]');
  const productCards = document.querySelectorAll('[data-category]');

  function filterProducts(category: string | undefined) {
    // Update button states
    filterButtons.forEach(btn => {
      if (btn instanceof HTMLElement) {
        const isActive = btn.dataset.filter === category;
        btn.dataset.active = isActive.toString();
        btn.classList.toggle('bg-blue-600', isActive);
        btn.classList.toggle('text-white', isActive);
      }
    });

    // Filter products
    productCards.forEach(card => {
      if (card instanceof HTMLElement) {
        if (category === 'all' || card.dataset.category === category) {
          card.style.opacity = '0';
          card.style.display = 'block';
          requestAnimationFrame(() => {
            card.style.opacity = '1';
            card.style.transform = 'translateY(0)';
          });
        } else {
          card.style.opacity = '0';
          card.style.transform = 'translateY(20px)';
          setTimeout(() => {
            card.style.display = 'none';
          }, 300);
        }
      }
    });
  }

  filterButtons.forEach(button => {
    button.addEventListener('click', () => {
      const category = button.getAttribute('data-filter');
      if (category) filterProducts(category);
    });
  });

  // Initialize with all products shown
  filterProducts('all');
</script>